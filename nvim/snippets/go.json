{
	"print": {
		"prefix": "fp",
		"body": [
			"fmt.Println($1)$0"
		],
		"description": "Print line"
	},
	"Print line": {
		"prefix": "pl",
		"body": [
			"fmt.Println(\"-------------------------\",$1,\"-------------------------\")$0"
		],
		"description": "Print line"
	},
	"Print dupa": {
		"prefix": "pd",
		"body": [
			"fmt.Println(\"------------------------- dupa -------------------------\")$0"
		],
		"description": "Print dupa"
	},
	"Clear terminal": {
		"prefix": "clear",
		"body": [
			"fmt.Print(\"\\033[H\\033[2J\")"
		],
		"description": "clear console"
	},
	"Print json": {
		"prefix": "pj",
		"body": [
			"util.PrintJSON(${1:obj})"
		],
		"description": "Print json"
	},
	"sleep": {
		"prefix": "sleep",
		"body": [
			"time.Sleep($1* time.Second)"
		],
		"description": "sleep"
	},
	"pprofHeap": {
		"prefix": "pprofHeap",
		"body": [
			"func pprofSvgHeap(w http.ResponseWriter, r *http.Request) {",
			"    cmd := `go tool pprof -svg 'localhost:`+\"${1:6060}\"+`/debug/pprof/heap'`",
			"    out, err := exec.Command(\"/bin/sh\", \"-c\", cmd).CombinedOutput()",
			"    if err != nil {",
			"       log.Error(err, string(out))",
			"       return",
			"    }",
			"    sl := strings.Split(string(out), \"\\n\")[2:]",
			"    sl[6] = sl[6][:len(sl[6])-1] + ` style=\"background-color: #423b38;\">`",
			"    s := strings.Join(sl, \"\\n\")",
			"    s = strings.Replace(s, \"fill=\\\"white\\\"\", \"fill=\\\"#423b38\\\"\", 1)",
			"    w.Write([]byte(s))",
			"}",
			"http.HandleFunc(\"/heap\", pprofSvgHeap)"
		],
		"description": "pprofHeap"
	},
	"pprofGoroutines": {
		"prefix": "pprofGoroutines",
		"body": [
			"func pprofSvgGoroutine(w http.ResponseWriter, r *http.Request) {",
			"    cmd := `go tool pprof -svg 'localhost:`+\"${1:6060}\"+`/debug/pprof/goroutine'`",
			"    out, err := exec.Command(\"/bin/sh\", \"-c\", cmd).CombinedOutput()",
			"    if err != nil {",
			"       log.Error(err, string(out))",
			"       return",
			"    }",
			"    sl := strings.Split(string(out), \"\\n\")[2:]",
			"    sl[6] = sl[6][:len(sl[6])-1] + ` style=\"background-color: #423b38;\">`",
			"    s := strings.Join(sl, \"\\n\")",
			"    s = strings.Replace(s, \"fill=\\\"white\\\"\", \"fill=\\\"#423b38\\\"\", 1)",
			"    w.Write([]byte(s))",
			"}",
			"http.HandleFunc(\"/goro\", pprofSvgGoroutine)"
		],
		"description": "pprofGoroutines"
	},
	"pprofAllocs": {
		"prefix": "pprofAllocs",
		"body": [
			"func pprofSvgAllocs(w http.ResponseWriter, r *http.Request) {",
			"    cmd := `go tool pprof -svg 'localhost:`+\"${1:6060}\"+`/debug/pprof/allocs'`",
			"    out, err := exec.Command(\"/bin/sh\", \"-c\", cmd).CombinedOutput()",
			"    if err != nil {",
			"       log.Error(err, string(out))",
			"       return",
			"    }",
			"    sl := strings.Split(string(out), \"\\n\")[2:]",
			"    sl[6] = sl[6][:len(sl[6])-1] + ` style=\"background-color: #423b38;\">`",
			"    s := strings.Join(sl, \"\\n\")",
			"    s = strings.Replace(s, \"fill=\\\"white\\\"\", \"fill=\\\"#423b38\\\"\", 1)",
			"    w.Write([]byte(s))",
			"}",
			"http.HandleFunc(\"/alloc\", pprofSvgAllocs)"
		],
		"description": "pprofAllocs"
	},
	"pprofCpu": {
		"prefix": "pprofCpu",
		"body": [
			"func pprofSvgCpu(w http.ResponseWriter, r *http.Request) {",
			"\tcmd := `go tool pprof -svg 'localhost:` + \"${1:6060}\" + `/debug/pprof/profile?seconds=10&debug=1'`",
			"\tout, err := exec.Command(\"/bin/sh\", \"-c\", cmd).CombinedOutput()",
			"    if err != nil {",
			"       log.Error(err, string(out))",
			"       return",
			"    }",
			"    sl := strings.Split(string(out), \"\\n\")[2:]",
			"    sl[6] = sl[6][:len(sl[6])-1] + ` style=\"background-color: #423b38;\">`",
			"    s := strings.Join(sl, \"\\n\")",
			"    s = strings.Replace(s, \"fill=\\\"white\\\"\", \"fill=\\\"#423b38\\\"\", 1)",
			"    w.Write([]byte(s))",
			"}",
			"http.HandleFunc(\"/cpu\", pprofSvgCpu)"
		]
	},
	"dupa": {
		"prefix": "dupa",
		"body": [
			"func dupa() {",
			"    for {",
			"        //\\033[38;5;30m",
			"        fmt.Print(\"\\033[?25l\\033[H\\033[2J\")",
			"        fmt.Println(\"${1:Name} len:\", ${1:Name}.Len())",
			"        fmt.Println(\"\")",
			"        sm := safe.SortedMap[${2:type}, ${3:type}]{",
			"            Map: *${1:Name}.Copy(),",
			"        }",
			"        for i := range sm.Iter() {",
			"            fmt.Printf(\"${1:Name} %s: %d\", i.Key, len(i.Value.Debug()))",
			"        }",
			"        fmt.Println(\"\")",
			"        fmt.Println(\"Clients:\", $4)",
			"        fmt.Println(\"TotalMessages:\", $5)",
			"        fmt.Println(\"Goroutines:\", runtime.NumGoroutine())",
			"        fmt.Println(\"time:\", strings.Split(time.Now().String(), \"=\")[1])",
			"        time.Sleep(100 * time.Millisecond)",
			"    }",
			"}"
		],
		"description": "1"
	},
	"timeit": {
		"prefix": "timeit",
		"body": [
			"// timeIt function\nfunc timeIt(start time.Time, name string) {\nelapsed := time.Since(start)\nfmt.Printf(\"\\n-------------------------%s took %s-------------------------\\n\\n\", name, elapsed)\n}"
		],
		"description": "defer time a function"
	},
	"idk": {
		"prefix": "idk",
		"body": [
			"¯\\_(ツ)_/¯"
		],
		"description": "defer time a function"
	},
	"peekImp": {
		"prefix": "peekImp",
		"body": [
			"peek \"github.com/fr-str/var-peek\""
		],
		"description": ""
	},
	"action": {
		"prefix": "action",
		"body": [
			"type $1 struct {",
			"\tID string",
			"}",
			"",
			"// $1 Handler",
			"// Handles creation, listing and removal of $1 objects",
			"//",
			"// @Name $1",
			"// @Action new $1.New",
			"// @Action list $1.List",
			"// @Action update $1.Update",
			"// @Action delete $1.Delete",
			"// @Returns nil",
			"func (a *$1) Handle(r *ws.Request) *ws.Response {",
			"\tact := strings.TrimPrefix(r.Action, \"$2.\")",
			"\tswitch act {",
			"\tcase \"new\":",
			"\t\treturn a.New(r)",
			"\tcase \"update\":",
			"\t\treturn a.Update(r)",
			"\tcase \"list\":",
			"\t\treturn a.List(r)",
			"\tcase \"delete\":",
			"\t\treturn a.Delete(r)",
			"\tdefault:",
			"\t\treturn ws.ActionNotFound(r, act)",
			"\t}",
			"}",
			"",
			"func (a *$1) New(r *ws.Request) *ws.Response    { ",
			"\treturn ws.Ok(r,nil) ",
			"}",
			"",
			"func (a *$1) List(r *ws.Request) *ws.Response   { ",
			"\treturn ws.Ok(r,nil) ",
			"}",
			"",
			"func (a *$1) Update(r *ws.Request) *ws.Response { ",
			"\treturn ws.Ok(r,nil) ",
			"}",
			"",
			"func (a *$1) Delete(r *ws.Request) *ws.Response { ",
			"\treturn ws.Ok(r,nil) ",
			"}"
		]
	},
	"log info": {
		"prefix": "li",
		"body": [
			"log.Info($1)"
		]
	},
	"log error": {
		"prefix": "le",
		"body": [
			"log.Error($1)"
		]
	},
	"log debug": {
		"prefix": "ld",
		"body": [
			"log.Debug($1)"
		]
	}
}
